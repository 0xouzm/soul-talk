["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$bouncer.core","~:imports",null,"~:requires",["^ ","~$gstring","~$goog.string","^<","^<","~$goog.string.format","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$wrap-chain",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:private",true,"~:file","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","~:end-column",18,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~#list",["~$old-state","~$message-fn","~$fs"]]],"~:arglists",["^L",[["^M","^N","~$&","^O"]]],"~:arglists-meta",["^L",[null]]],"~:column",8,"~:line",133,"~:end-line",133,"^P",["^L",["~$quote",["^L",[["^M","^N","~$&","^O"]]]]],"~:doc","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n"],"^D",true,"^7","~$bouncer.core/wrap-chain","^E","resources/public/js/out/bouncer/core.cljc","^F",18,"^G",["^ ","^H",true,"^I",2,"^J",2,"^K",[["^L",["^M","^N","^O"]]],"^P",["^L",[["^M","^N","~$&","^O"]]],"^Q",["^L",[null]]],"^K",[["^L",["^M","^N","^O"]]],"~:protocol-impl",null,"^I",2,"^Q",["^L",[null]],"^R",1,"^H",true,"~:methods",[["^ ","^I",2,"^H",true,"~:tag","~$cljs.core/IVector"]],"^S",133,"~:ret-tag","~$any","^T",133,"^J",2,"~:fn-var",true,"^P",["^L",[["^M","^N","~$&","^O"]]],"^V","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n"],"~$wrap",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",85,"^R",8,"^T",85,"^F",12,"^D",true,"^P",["^L",["^U",["^L",[["^N","~$acc",["~$pred","~$k","~$&","~$args"]]]]]],"^V","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"^D",true,"^7","~$bouncer.core/wrap","^E","resources/public/js/out/bouncer/core.cljc","^F",12,"^K",["^L",[["^N","^14","~$p__24510"]]],"^X",null,"^Q",["^L",[null,null]],"^R",1,"^H",false,"^S",85,"^10",["^6",[null,"~$clj","^11"]],"^T",85,"^J",3,"^12",true,"^P",["^L",["^U",["^L",[["^N","^14",["^15","~$k","~$&","^16"]]]]]],"^V","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"~$validate*",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",150,"^R",8,"^T",150,"^F",17,"^D",true,"^P",["^L",["^U",["^L",[["^N","~$m","^O"]]]]],"^V","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"^D",true,"^7","~$bouncer.core/validate*","^E","resources/public/js/out/bouncer/core.cljc","^F",17,"^K",["^L",[["^N","~$m","^O"]]],"^X",null,"^Q",["^L",[null,null]],"^R",1,"^H",false,"^S",150,"^10","^[","^T",150,"^J",3,"^12",true,"^P",["^L",["^U",["^L",[["^N","~$m","^O"]]]]],"^V","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"~$valid?",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",221,"^R",7,"^T",221,"^F",13,"^P",["^L",["^U",["^L",[["~$&","^16"]]]]],"^V","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise.","^G",["^ ","^H",true,"^I",0,"^J",0,"^K",[["^L",["^16"]]],"^P",["^L",[["~$&","^16"]]],"^Q",["^L",[null]]]],"^7","~$bouncer.core/valid?","^E","resources/public/js/out/bouncer/core.cljc","^F",13,"^G",["^ ","^H",true,"^I",0,"^J",0,"^K",[["^L",["^16"]]],"^P",["^L",[["~$&","^16"]]],"^Q",["^L",[null]]],"^K",[["^L",["^16"]]],"^X",null,"^I",0,"^Q",["^L",[null]],"^R",1,"^H",true,"^Y",[["^ ","^I",0,"^H",true,"^Z","~$boolean"]],"^S",221,"^10","^11","^T",221,"^J",0,"^12",true,"^P",["^L",[["~$&","^16"]]],"^V","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise."],"~$validate",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",178,"^R",7,"^T",178,"^F",15,"^P",["^L",["^U",["^L",[["~$&","^16"]]]]],"^V","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n","^G",["^ ","^H",true,"^I",0,"^J",0,"^K",[["^L",["^16"]]],"^P",["^L",[["~$&","^16"]]],"^Q",["^L",[null]]]],"^7","~$bouncer.core/validate","^E","resources/public/js/out/bouncer/core.cljc","^F",15,"^G",["^ ","^H",true,"^I",0,"^J",0,"^K",[["^L",["^16"]]],"^P",["^L",[["~$&","^16"]]],"^Q",["^L",[null]]],"^K",[["^L",["^16"]]],"^X",null,"^I",0,"^Q",["^L",[null]],"^R",1,"^H",true,"^Y",[["^ ","^I",0,"^H",true,"^Z","^["]],"^S",178,"^10","^11","^T",178,"^J",0,"^12",true,"^P",["^L",[["~$&","^16"]]],"^V","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n"],"~$build-multi-step",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",24,"^R",8,"^T",24,"^F",24,"^D",true,"^P",["^L",["^U",["^L",[["~$key-or-vec","~$fn-vec"],["^1B",["~$f-or-list","~$&","~$rest"],"^14"]]]]],"^G",["^ ","^H",false,"^I",3,"^J",3,"^K",["^L",[["^1B","^1C"],["^1B",["^1D","~$&","^1E"],"^14"]]],"^P",["^L",[["^1B","^1C"],["^1B",["^1D","~$&","^1E"],"^14"]]],"^Q",["^L",[null,null]]]],"^D",true,"^7","~$bouncer.core/build-multi-step","^E","resources/public/js/out/bouncer/core.cljc","^F",24,"^G",["^ ","^H",false,"^I",3,"^J",3,"^K",["^L",[["^1B","^1C"],["^1B",["^1D","~$&","^1E"],"^14"]]],"^P",["^L",[["^1B","^1C"],["^1B",["^1D","~$&","^1E"],"^14"]]],"^Q",["^L",[null,null]]],"^K",["^L",[["^1B","^1C"],["^1B",["^1D","~$&","^1E"],"^14"]]],"^X",null,"^I",3,"^Q",["^L",[null,null]],"^R",1,"^H",false,"^Y",[["^ ","^I",2,"^H",false,"^Z","^11"],["^ ","^I",3,"^H",false]],"^S",24,"^T",24,"^J",3,"^12",true,"^P",["^L",[["^1B","^1C"],["^1B",["^1D","~$&","^1E"],"^14"]]]],"~$build-steps",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",64,"^R",8,"^T",64,"^F",19,"^D",true,"^P",["^L",["^U",["^L",[[["~$head","~$&","~$tail","~:as","~$forms"]]]]]]],"^D",true,"^7","~$bouncer.core/build-steps","^E","resources/public/js/out/bouncer/core.cljc","^F",19,"^K",["^L",[["~$p__24501"]]],"^X",null,"^Q",["^L",[null,null]],"^R",1,"^H",false,"^S",64,"^10",["^6",[null,"^11"]],"^T",64,"^J",1,"^12",true,"^P",["^L",["^U",["^L",[[["^1H","~$&","^1I","^1J","^1K"]]]]]]],"~$pre-condition-met?",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",82,"^R",8,"^T",82,"^F",26,"^D",true,"^P",["^L",["^U",["^L",[["~$pre-fn","~$map"]]]]]],"^D",true,"^7","~$bouncer.core/pre-condition-met?","^E","resources/public/js/out/bouncer/core.cljc","^F",26,"^K",["^L",[["^1O","^1P"]]],"^X",null,"^Q",["^L",[null,null]],"^R",1,"^H",false,"^S",82,"^10",["^6",["^1>","^11"]],"^T",82,"^J",2,"^12",true,"^P",["^L",["^U",["^L",[["^1O","^1P"]]]]]],"~$merge-path",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",40,"^R",8,"^T",40,"^F",18,"^D",true,"^P",["^L",["^U",["^L",[["~$parent-key","~$validations-map"]]]]],"^V","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"^D",true,"^7","~$bouncer.core/merge-path","^E","resources/public/js/out/bouncer/core.cljc","^F",18,"^K",["^L",[["^1S","^1T"]]],"^X",null,"^Q",["^L",[null,null]],"^R",1,"^H",false,"^S",40,"^10","^11","^T",40,"^J",2,"^12",true,"^P",["^L",["^U",["^L",[["^1S","^1T"]]]]],"^V","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"~$with-default-messages",["^ ","^B",null,"^C",["^ ","^E","/Users/wu/workspace/did/clojure/soul-talk/resources/public/js/out/bouncer/core.cljc","^S",165,"^R",7,"^T",165,"^F",28,"^P",["^L",["^U",["^L",[["~$error"]]]]],"^V","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"],"^7","~$bouncer.core/with-default-messages","^E","resources/public/js/out/bouncer/core.cljc","^F",28,"^K",["^L",[["^1W"]]],"^X",null,"^Q",["^L",[null,null]],"^R",1,"^H",false,"^S",165,"^10","^11","^T",165,"^J",1,"^12",true,"^P",["^L",["^U",["^L",[["^1W"]]]]],"^V","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:args","~:path","~:pre","~:else","~:value","~:bouncer.core/errors","~:optional","~:metadata","~:default-message-format","~:message"]],"~:order",["^24","^26","^27","^29","^2:","^23","^22","^25","^21","^28"]],"^V","The `core` namespace provides the two main entry point functions in bouncer:\n\n  - `validate`\n  - `valid?`\n\n\nAll other functions are meant for internal use only and shouldn't be relied upon.\n\nThe project [README](https://github.com/leonardoborges/bouncer/blob/master/README.md) should get you started,\nit's pretty comprehensive.\n\n\nIf you'd like to know more about the motivation behind `bouncer`, check the\n[announcement post](http://www.leonardoborges.com/writings/2013/01/04/bouncer-validation-lib-for-clojure/)."]